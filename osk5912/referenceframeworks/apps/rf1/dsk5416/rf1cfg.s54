;;   Do *not* directly modify this file.  It was   
;;   generated by the Configuration Tool; any 
;;   changes risk being overwritten.               

;; INPUT rf1.cdb

;; CONFIGURATION/VERSION INFORMATION
	.asg "Fri Nov 23 17:22:20 2007", VERS$DATE

;; PROLOGUE
	.include rf1cfg.h54
	.copy confbeg.s54

;; TYPE HEADERS
	.include gbl.h54
	.include mem.h54
	.include obj.h54
	.include buf.h54
	.include clk.h54
	.include prd.h54
	.include rtdx.h54
	.include hst.h54
	.include hwi.h54
	.include swi.h54
	.include tsk.h54
	.include idl.h54
	.include log.h54
	.include pip.h54
	.include sem.h54
	.include mbx.h54
	.include que.h54
	.include lck.h54
	.include sio.h54
	.include sts.h54
	.include sys.h54
	.include gio.h54
	.include dev.h54
	.include udev.h54
	.include dgn.h54
	.include dhl.h54
	.include dpi.h54
	.include hook.h54
	.include dio.h54

;; TYPE ATTRIBUTES
MEM$NUMOF           .set 12
MEM$SETOF           .set 00H
OBJ$NUMOF           .set 0
OBJ$SETOF           .set 00H
BUF$NUMOF           .set 0
BUF$SETOF           .set 00H
CLK$NUMOF           .set 0
CLK$SETOF           .set 00H
PRD$NUMOF           .set 0
PRD$SETOF           .set 00H
RTDX$NUMOF          .set 0
RTDX$SETOF          .set 00H
HST$NUMOF           .set 0
HST$SETOF           .set 00H
HWI$NUMOF           .set 32
HWI$SETOF           .set 0ffffH
SWI$NUMOF           .set 0
SWI$SETOF           .set 00H
TSK$NUMOF           .set 0
TSK$SETOF           .set 00H
IDL$NUMOF           .set 1
IDL$SETOF           .set 00H
LOG$NUMOF           .set 2
LOG$SETOF           .set 00H
PIP$NUMOF           .set 2
PIP$SETOF           .set 00H
SEM$NUMOF           .set 0
SEM$SETOF           .set 00H
MBX$NUMOF           .set 0
MBX$SETOF           .set 00H
QUE$NUMOF           .set 0
QUE$SETOF           .set 00H
LCK$NUMOF           .set 0
LCK$SETOF           .set 00H
SIO$NUMOF           .set 0
SIO$SETOF           .set 00H
STS$NUMOF           .set 1
STS$SETOF           .set 00H
DEV$NUMOF           .set 0
DEV$SETOF           .set 00H
UDEV$NUMOF          .set 1
UDEV$SETOF          .set 00H
DGN$NUMOF           .set 0
DGN$SETOF           .set 00H
DHL$NUMOF           .set 0
DHL$SETOF           .set 00H
DPI$NUMOF           .set 0
DPI$SETOF           .set 00H
HOOK$NUMOF          .set 0
HOOK$SETOF          .set 00H
DIO$NUMOF           .set 0
DIO$SETOF           .set 00H

;; module GBL (ROM, CHIPTYPE5441, CHIPPRSC, PMST, SWWSR, MODIFYSWCR, SWCR, BSCR, MODIFYCLKMD, CLKMD, USERINIT, USERINITFXN, ENABLEINST, FARMODE, SUPPORTCSL, TRCMASKVALUE, CALLCSLCFGINIT)
	.global GBL$                     ; == 1
	.global GBL_ROM                  ; rf1cfg.h54
	.global GBL_CHIPTYPE5441         ; rf1cfg.h54
	.global GBL_CHIPPRSC             ; rf1cfg.h54
	.global GBL_PMST                 ; rf1cfg.h54
	.global GBL_SWWSR                ; rf1cfg.h54
	.global GBL_MODIFYSWCR           ; rf1cfg.h54
	.global GBL_SWCR                 ; rf1cfg.h54
	.global GBL_BSCR                 ; rf1cfg.h54
	.global GBL_MODIFYCLKMD          ; rf1cfg.h54
	.global GBL_CLKMD                ; rf1cfg.h54
	.global GBL_USERINIT             ; rf1cfg.h54
	.global GBL_USERINITFXN          ; rf1cfg.cmd
	.global GBL_ENABLEINST           ; rf1cfg.h54
	.global GBL_FARMODE              ; rf1cfg.h54
	.global GBL_SUPPORTCSL           ; rf1cfg.h54
	.global GBL_TRCMASKVALUE         ; rf1cfg.h54
	.global GBL_CALLCSLCFGINIT       ; rf1cfg.h54

;; module MEM (gNumHeap, SEGZERO, MALLOCSEG)
	.global MEM$                     ; == 1
	.global MEM_gNumHeap             ; rf1cfg.h54
	.global MEM_SEGZERO              ; rf1cfg.cmd
	.global MEM_MALLOCSEG            ; rf1cfg.cmd

;; module OBJ ()
	.global OBJ$                     ; == 0

;; module BUF (ENABLED)
	.global BUF$                     ; == 0
	.global BUF_ENABLED              ; rf1cfg.h54

;; module CLK (REGS, TIMERNUM, USETIMER, TCR, TDDR, TDDRHIGH, PRD, PRDHIGH, COUNTSPMS, COUNTSPMSHIGH, TIMEFXN, HOOKFXN)
	.global CLK$                     ; == 1
	.global CLK_REGS                 ; rf1cfg.h54
	.global CLK_TIMERNUM             ; rf1cfg.h54
	.global CLK_USETIMER             ; rf1cfg.h54
	.global CLK_TCR                  ; rf1cfg.h54
	.global CLK_TDDR                 ; rf1cfg.h54
	.global CLK_TDDRHIGH             ; rf1cfg.h54
	.global CLK_PRD                  ; rf1cfg.h54
	.global CLK_PRDHIGH              ; rf1cfg.h54
	.global CLK_COUNTSPMS            ; rf1cfg.h54
	.global CLK_COUNTSPMSHIGH        ; rf1cfg.h54
	.global CLK_TIMEFXN              ; rf1cfg.cmd
	.global CLK_HOOKFXN              ; rf1cfg.cmd

;; module PRD (SCALAR, THOOKFXN)
	.global PRD$                     ; == 1
	.global PRD_SCALAR               ; rf1cfg.h54
	.global PRD_THOOKFXN             ; rf1cfg.cmd

;; module RTDX (USERTDX, USERTEXECUTION, DATAMEMSEG, BUFMEMSIZE)
	.global RTDX$                    ; == 0
	.global RTDX_USERTDX             ; rf1cfg.h54
	.global RTDX_USERTEXECUTION      ; rf1cfg.h54
	.global RTDX_DATAMEMSEG          ; rf1cfg.cmd
	.global RTDX_BUFMEMSIZE          ; rf1cfg.h54

;; module HST (RTDX, DSM, NONE, MAXFRAMESET, MAXFRAMEALLOWED, DSMBUFSEG, DSMMEMSIZE)
	.global HST$                     ; == 0
	.global HST_RTDX                 ; rf1cfg.h54
	.global HST_DSM                  ; rf1cfg.h54
	.global HST_NONE                 ; rf1cfg.h54
	.global HST_MAXFRAMESET          ; rf1cfg.h54
	.global HST_MAXFRAMEALLOWED      ; rf1cfg.h54
	.global HST_DSMBUFSEG            ; rf1cfg.cmd
	.global HST_DSMMEMSIZE           ; rf1cfg.h54

;; module HWI ()
	.global HWI$                     ; == 1

;; module SWI (EHOOKFXN, IHOOKFXN, EXECFXN, RUNFXN)
	.global SWI$                     ; == 0
	.global SWI_EHOOKFXN             ; rf1cfg.cmd
	.global SWI_IHOOKFXN             ; rf1cfg.cmd
	.global SWI_EXECFXN              ; rf1cfg.cmd
	.global SWI_RUNFXN               ; rf1cfg.cmd

;; module TSK (STACKSIZE, STACKSEG, PRIORITY, VCREATEFXN, VDELETEFXN, VEXITFXN, SWITCHFXN, READYFXN, NUM_HOOKS)
	.global TSK$                     ; == 0
	.global TSK_STACKSIZE            ; rf1cfg.h54
	.global TSK_STACKSEG             ; rf1cfg.cmd
	.global TSK_PRIORITY             ; rf1cfg.h54
	.global TSK_VCREATEFXN           ; rf1cfg.cmd
	.global TSK_VDELETEFXN           ; rf1cfg.cmd
	.global TSK_VEXITFXN             ; rf1cfg.cmd
	.global TSK_SWITCHFXN            ; rf1cfg.h54
	.global TSK_READYFXN             ; rf1cfg.h54
	.global TSK_NUM_HOOKS            ; rf1cfg.h54

;; module IDL (USECLKIDLTIME, CALIBRFXN)
	.global IDL$                     ; == 1
	.global IDL_USECLKIDLTIME        ; rf1cfg.h54
	.global IDL_CALIBRFXN            ; rf1cfg.cmd

;; module LOG (ENABLED)
	.global LOG$                     ; == 1
	.global LOG_ENABLED              ; rf1cfg.h54

;; module PIP (gNumEmbed, gNextId)
	.global PIP$                     ; == 1
	.global PIP_gNumEmbed            ; rf1cfg.h54
	.global PIP_gNextId              ; rf1cfg.h54

;; module SEM ()
	.global SEM$                     ; == 0

;; module MBX ()
	.global MBX$                     ; == 0

;; module QUE ()
	.global QUE$                     ; == 1

;; module LCK ()
	.global LCK$                     ; == 1

;; module SIO ()
	.global SIO$                     ; == 0

;; module STS ()
	.global STS$                     ; == 1

;; module SYS (ABORTFXN, ERRORFXN, EXITFXN, PUTCFXN)
	.global SYS$                     ; == 1
	.global SYS_ABORTFXN             ; rf1cfg.cmd
	.global SYS_ERRORFXN             ; rf1cfg.cmd
	.global SYS_EXITFXN              ; rf1cfg.cmd
	.global SYS_PUTCFXN              ; rf1cfg.cmd

;; module GIO (CREATEFXN, DELETEFXN, PENDFXN, POSTFXN)
	.global GIO$                     ; == 0
	.global GIO_CREATEFXN            ; rf1cfg.cmd
	.global GIO_DELETEFXN            ; rf1cfg.cmd
	.global GIO_PENDFXN              ; rf1cfg.cmd
	.global GIO_POSTFXN              ; rf1cfg.cmd

;; module DEV ()
	.global DEV$                     ; == 0

;; module UDEV ()
	.global UDEV$                    ; == 1

;; module DGN ()
	.global DGN$                     ; == 0

;; module DHL (gChannelsAvailable)
	.global DHL$                     ; == 0
	.global DHL_gChannelsAvailable   ; rf1cfg.h54

;; module DPI ()
	.global DPI$                     ; == 0

;; module HOOK (KNLID)
	.global HOOK$                    ; == 0
	.global HOOK_KNLID               ; rf1cfg.h54

;; module DIO (STATIC, NUMTSKBASE, NUMSWIBASE)
	.global DIO$                     ; == 0
	.global DIO_STATIC               ; rf1cfg.h54
	.global DIO_NUMTSKBASE           ; rf1cfg.h54
	.global DIO_NUMSWIBASE           ; rf1cfg.h54

;; MODULE CONFIGURATION

;; ======== GBL_config ========
	.asg 00H, _ROM
	.asg 00H, _CHIPTYPE5441
	.asg 00H, _CHIPPRSC
	.asg 07facH, _PMST
	.asg 04492H, _SWWSR
	.asg 01H, _MODIFYSWCR
	.asg 00H, _SWCR
	.asg 0a002H, _BSCR
	.asg 01H, _MODIFYCLKMD
	.asg 09007H, _CLKMD
	.asg 00H, _USERINIT
	.asg _FXN_F_nop, _USERINITFXN
	.asg 00H, _ENABLEINST
	.asg 00H, _FARMODE
	.asg 01H, _SUPPORTCSL
	.asg 0dbefH, _TRCMASKVALUE
	.asg 01H, _CALLCSLCFGINIT
	GBL_config  _ROM, _CHIPTYPE5441, _CHIPPRSC, _PMST, _SWWSR, _MODIFYSWCR, _SWCR, _BSCR, _MODIFYCLKMD, _CLKMD, _USERINIT, _USERINITFXN, _ENABLEINST, _FARMODE, _SUPPORTCSL, _TRCMASKVALUE, _CALLCSLCFGINIT

;; ======== MEM_config ========
	.asg 00H, _gNumHeap
	.asg MEM_NULL, _SEGZERO
	.asg MEM_NULL, _MALLOCSEG
	MEM_config  _gNumHeap, _SEGZERO, _MALLOCSEG

;; ======== OBJ_config ========
	OBJ_config

;; ======== BUF_config ========
	.asg 01H, _ENABLED
	BUF_config  _ENABLED

;; ======== CLK_config ========
	.asg 00H, _REGS
	.asg 00H, _TIMERNUM
	.asg 01H, _USETIMER
	.asg 022H, _TCR
	.asg 02H, _TDDR
	.asg 00H, _TDDRHIGH
	.asg 0d054H, _PRD
	.asg 00H, _PRDHIGH
	.asg 0d055H, _COUNTSPMS
	.asg 00H, _COUNTSPMSHIGH
	.asg CLK_F_getshtime, _TIMEFXN
	.asg CLK_F_rete, _HOOKFXN
	CLK_config  _REGS, _TIMERNUM, _USETIMER, _TCR, _TDDR, _TDDRHIGH, _PRD, _PRDHIGH, _COUNTSPMS, _COUNTSPMSHIGH, _TIMEFXN, _HOOKFXN

;; ======== PRD_config ========
	.asg 04000H, _SCALAR
	.asg FXN_F_nop, _THOOKFXN
	PRD_config  _SCALAR, _THOOKFXN

;; ======== RTDX_config ========
	.asg 00H, _USERTDX
	.asg 00H, _USERTEXECUTION
	.asg IDATA, _DATAMEMSEG
	.asg 0102H, _BUFMEMSIZE
	RTDX_config  _USERTDX, _USERTEXECUTION, _DATAMEMSEG, _BUFMEMSIZE

;; ======== HST_config ========
	.asg 00H, _RTDX
	.asg 00H, _DSM
	.asg 01H, _NONE
	.asg 00H, _MAXFRAMESET
	.asg 0100H, _MAXFRAMEALLOWED
	.asg IDATA, _DSMBUFSEG
	.asg 0400H, _DSMMEMSIZE
	HST_config  _RTDX, _DSM, _NONE, _MAXFRAMESET, _MAXFRAMEALLOWED, _DSMBUFSEG, _DSMMEMSIZE

;; ======== HWI_config ========
	HWI_config

;; ======== SWI_config ========
	.asg GBL_NULL, _EHOOKFXN
	.asg GBL_NULL, _IHOOKFXN
	.asg FXN_F_nop, _EXECFXN
	.asg FXN_F_nop, _RUNFXN
	SWI_config  _EHOOKFXN, _IHOOKFXN, _EXECFXN, _RUNFXN

;; ======== TSK_config ========
	.asg 0100H, _STACKSIZE
	.asg MEM_NULL, _STACKSEG
	.asg 01H, _PRIORITY
	.asg _FXN_F_nop, _VCREATEFXN
	.asg _FXN_F_nop, _VDELETEFXN
	.asg _FXN_F_nop, _VEXITFXN
	.asg 00H, _SWITCHFXN
	.asg 00H, _READYFXN
	.asg 00H, _NUM_HOOKS
	TSK_config  _STACKSIZE, _STACKSEG, _PRIORITY, _VCREATEFXN, _VDELETEFXN, _VEXITFXN, _SWITCHFXN, _READYFXN, _NUM_HOOKS

;; ======== IDL_config ========
	.asg 00H, _USECLKIDLTIME
	.asg GBL_NULL, _CALIBRFXN
	IDL_config  _USECLKIDLTIME, _CALIBRFXN

;; ======== LOG_config ========
	.asg 01H, _ENABLED
	LOG_config  _ENABLED

;; ======== PIP_config ========
	.asg 00H, _gNumEmbed
	.asg 02H, _gNextId
	PIP_config  _gNumEmbed, _gNextId

;; ======== SEM_config ========
	SEM_config

;; ======== MBX_config ========
	MBX_config

;; ======== QUE_config ========
	QUE_config

;; ======== LCK_config ========
	LCK_config

;; ======== SIO_config ========
	SIO_config

;; ======== STS_config ========
	STS_config

;; ======== SYS_config ========
	.asg _UTL_halt, _ABORTFXN
	.asg _UTL_halt, _ERRORFXN
	.asg _UTL_halt, _EXITFXN
	.asg _FXN_F_nop, _PUTCFXN
	SYS_config  _ABORTFXN, _ERRORFXN, _EXITFXN, _PUTCFXN

;; ======== GIO_config ========
	.asg _FXN_F_nop, _CREATEFXN
	.asg _FXN_F_nop, _DELETEFXN
	.asg _FXN_F_nop, _PENDFXN
	.asg _FXN_F_nop, _POSTFXN
	GIO_config  _CREATEFXN, _DELETEFXN, _PENDFXN, _POSTFXN

;; ======== DEV_config ========
	DEV_config

;; ======== UDEV_config ========
	UDEV_config

;; ======== DGN_config ========
	DGN_config

;; ======== DHL_config ========
	.asg 00H, _gChannelsAvailable
	DHL_config  _gChannelsAvailable

;; ======== DPI_config ========
	DPI_config

;; ======== HOOK_config ========
	.asg 00H, _KNLID
	HOOK_config  _KNLID

;; ======== DIO_config ========
	.asg 00H, _STATIC
	.asg 00H, _NUMTSKBASE
	.asg 00H, _NUMSWIBASE
	DIO_config  _STATIC, _NUMTSKBASE, _NUMSWIBASE

;; ======== UDEV_Obj udevCodec ========
;; <add comments here>
;;
;; UDEV_Obj udevCodec (iFxns, driverType, iParams, deviceId, initFxn, deviceGlobalDataPtr)
	.global udevCodec
	.asg _DSK5416_DMA_PCM3002_FXNS, _iFxns
	.asg "DEV_IOMTYPE", _driverType
	.asg 00H, _iParams
	.asg 00H, _deviceId
	.asg _DSK5416_DMA_PCM3002_init, _initFxn
	.asg 00H, _deviceGlobalDataPtr
	UDEV_Obj 1, udevCodec, 0, _iFxns, _driverType, _iParams, _deviceId, _initFxn, _deviceGlobalDataPtr

;; ======== MEM_Obj USERREGS ========
;; This object defines space for the DSP's memory mapped registers and can't be deleted
;;
;; MEM_Obj USERREGS (len, iAllocHeap, iSegZero, iHeapId)
	.global USERREGS
	.asg 01aH, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, USERREGS, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj BIOSREGS ========
;; This object defines space for the BIOS on-chip registers and can't be deleted
;;
;; MEM_Obj BIOSREGS (len, iAllocHeap, iSegZero, iHeapId)
	.global BIOSREGS
	.asg 04H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, BIOSREGS, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj CSLREGS ========
;; This object defines space for the CSL on-chip registers and can't be deleted
;;
;; MEM_Obj CSLREGS (len, iAllocHeap, iSegZero, iHeapId)
	.global CSLREGS
	.asg 02H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, CSLREGS, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj VECT ========
;; This object defines space for the DSP's interrupt vectors and can't be deleted
;;
;; MEM_Obj VECT (len, iAllocHeap, iSegZero, iHeapId)
	.global VECT
	.asg 080H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, VECT, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj IDATA ========
;; On-Chip DARAM0-3 in data memory
;;
;; MEM_Obj IDATA (len, iAllocHeap, iSegZero, iHeapId)
	.global IDATA
	.asg 06000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, IDATA, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj IPROG ========
;; On-Chip DARAM0-3 in program memory
;;
;; MEM_Obj IPROG (len, iAllocHeap, iSegZero, iHeapId)
	.global IPROG
	.asg 0f00H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, IPROG, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj DARAM47 ========
;; On-Chip DARAM4-7 in data memory
;;
;; MEM_Obj DARAM47 (len, iAllocHeap, iSegZero, iHeapId)
	.global DARAM47
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, DARAM47, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SARAM03 ========
;; On-Chip SARAM0-3 in program memory
;;
;; MEM_Obj SARAM03 (len, iAllocHeap, iSegZero, iHeapId)
	.global SARAM03
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SARAM03, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SARAM47 ========
;; On-Chip SARAM4-7 in program memory
;;
;; MEM_Obj SARAM47 (len, iAllocHeap, iSegZero, iHeapId)
	.global SARAM47
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SARAM47, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj IPROGOVL ========
;; <add comments here>
;;
;; MEM_Obj IPROGOVL (len, iAllocHeap, iSegZero, iHeapId)
	.global IPROGOVL
	.asg 01000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, IPROGOVL, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj IDATAOVL ========
;; <add comments here>
;;
;; MEM_Obj IDATAOVL (len, iAllocHeap, iSegZero, iHeapId)
	.global IDATAOVL
	.asg 01000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, IDATAOVL, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj PRGDUMMY ========
;; <add comments here>
;;
;; MEM_Obj PRGDUMMY (len, iAllocHeap, iSegZero, iHeapId)
	.global PRGDUMMY
	.asg 01H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, PRGDUMMY, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== HWI_Obj HWI_RS ========
;; defines function for the RS ISR
;;
;; HWI_Obj HWI_RS (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_RS
	.asg _c_int00, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_RS, 0, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_NMI ========
;; defines function for the NMI ISR
;;
;; HWI_Obj HWI_NMI (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_NMI
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_NMI, 1, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT17 ========
;; defines function for the SINT17 ISR
;;
;; HWI_Obj HWI_SINT17 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT17
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT17, 2, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT18 ========
;; defines function for the SINT18 ISR
;;
;; HWI_Obj HWI_SINT18 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT18
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT18, 3, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT19 ========
;; defines function for the SINT19 ISR
;;
;; HWI_Obj HWI_SINT19 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT19
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT19, 4, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT20 ========
;; defines function for the SINT20 ISR
;;
;; HWI_Obj HWI_SINT20 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT20
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT20, 5, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT21 ========
;; defines function for the SINT21 ISR
;;
;; HWI_Obj HWI_SINT21 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT21
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT21, 6, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT22 ========
;; defines function for the SINT22 ISR
;;
;; HWI_Obj HWI_SINT22 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT22
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT22, 7, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT23 ========
;; defines function for the SINT23 ISR
;;
;; HWI_Obj HWI_SINT23 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT23
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT23, 8, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT24 ========
;; defines function for the SINT24 ISR
;;
;; HWI_Obj HWI_SINT24 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT24
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT24, 9, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT25 ========
;; defines function for the SINT25 ISR
;;
;; HWI_Obj HWI_SINT25 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT25
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT25, 10, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT26 ========
;; defines function for the SINT26 ISR
;;
;; HWI_Obj HWI_SINT26 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT26
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT26, 11, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT27 ========
;; defines function for the SINT27 ISR
;;
;; HWI_Obj HWI_SINT27 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT27
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT27, 12, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT28 ========
;; defines function for the SINT28 ISR
;;
;; HWI_Obj HWI_SINT28 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT28
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT28, 13, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT29 ========
;; RESERVED for RTDX
;;
;; HWI_Obj HWI_SINT29 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT29
	.asg RESERVED, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT29, 14, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT30 ========
;; RESERVED for RTDX
;;
;; HWI_Obj HWI_SINT30 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT30
	.asg RESERVED, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _IntrMask
	HWI_Obj 1, HWI_SINT30, 15, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_INT0 ========
;; defines function for the INT0 ISR
;;
;; HWI_Obj HWI_INT0 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_INT0
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01H, _IntrMask
	HWI_Obj 1, HWI_INT0, 16, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_INT1 ========
;; defines function for the INT1 ISR
;;
;; HWI_Obj HWI_INT1 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_INT1
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02H, _IntrMask
	HWI_Obj 1, HWI_INT1, 17, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_INT2 ========
;; defines function for the INT2 ISR
;;
;; HWI_Obj HWI_INT2 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_INT2
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04H, _IntrMask
	HWI_Obj 1, HWI_INT2, 18, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_TINT ========
;; defines function for the TINT ISR
;;
;; HWI_Obj HWI_TINT (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_TINT
	.asg CLK_F_isr, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "CLK", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08H, _IntrMask
	HWI_Obj 1, HWI_TINT, 19, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT4 ========
;; defines function for the SINT4 ISR
;;
;; HWI_Obj HWI_SINT4 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT4
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 010H, _IntrMask
	HWI_Obj 1, HWI_SINT4, 20, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT5 ========
;; defines function for the SINT5 ISR
;;
;; HWI_Obj HWI_SINT5 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT5
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 020H, _IntrMask
	HWI_Obj 1, HWI_SINT5, 21, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT6 ========
;; defines function for the SINT6 ISR
;;
;; HWI_Obj HWI_SINT6 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT6
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 040H, _IntrMask
	HWI_Obj 1, HWI_SINT6, 22, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT7 ========
;; defines function for the SINT7 ISR
;;
;; HWI_Obj HWI_SINT7 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT7
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 080H, _IntrMask
	HWI_Obj 1, HWI_SINT7, 23, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT8 ========
;; defines function for the SINT8 ISR
;;
;; HWI_Obj HWI_SINT8 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT8
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0100H, _IntrMask
	HWI_Obj 1, HWI_SINT8, 24, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT9 ========
;; defines function for the SINT9 ISR
;;
;; HWI_Obj HWI_SINT9 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT9
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0200H, _IntrMask
	HWI_Obj 1, HWI_SINT9, 25, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT10 ========
;; defines function for the SINT10 ISR
;;
;; HWI_Obj HWI_SINT10 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT10
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0400H, _IntrMask
	HWI_Obj 1, HWI_SINT10, 26, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT11 ========
;; defines function for the SINT11 ISR
;;
;; HWI_Obj HWI_SINT11 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT11
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0800H, _IntrMask
	HWI_Obj 1, HWI_SINT11, 27, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT12 ========
;; defines function for the SINT12 ISR
;;
;; HWI_Obj HWI_SINT12 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT12
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01000H, _IntrMask
	HWI_Obj 1, HWI_SINT12, 28, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT13 ========
;; defines function for the SINT13 ISR
;;
;; HWI_Obj HWI_SINT13 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT13
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02000H, _IntrMask
	HWI_Obj 1, HWI_SINT13, 29, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT14 ========
;; defines function for the SINT14 ISR
;;
;; HWI_Obj HWI_SINT14 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT14
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04000H, _IntrMask
	HWI_Obj 1, HWI_SINT14, 30, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== HWI_Obj HWI_SINT15 ========
;; defines function for the SINT15 ISR
;;
;; HWI_Obj HWI_SINT15 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask)
	.global HWI_SINT15
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08000H, _IntrMask
	HWI_Obj 1, HWI_SINT15, 31, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask

;; ======== IDL_Obj audioIdl ========
;; This is the audio processing thread
;;
;; IDL_Obj audioIdl (function, calibration)
	.global audioIdl
	.asg _checkFlags, _function
	.asg 01H, _calibration
	IDL_Obj 1, audioIdl, 0, _function, _calibration

;; ======== LOG_Obj LOG_system ========
;; This object is required by the system to accumulate execution trace information
;;
;; LOG_Obj LOG_system (bufseg, buflen, logtype)
	.global LOG_system
	.asg IDATA, _bufseg
	.asg 020H, _buflen
	.asg "circular", _logtype
	LOG_Obj 1, LOG_system, 0, _bufseg, _buflen, _logtype

;; ======== LOG_Obj trace ========
;; default LOG object for application messages
;;
;; LOG_Obj trace (bufseg, buflen, logtype)
	.global trace
	.asg IDATA, _bufseg
	.asg 020H, _buflen
	.asg "circular", _logtype
	LOG_Obj 1, trace, 0, _bufseg, _buflen, _logtype

;; ======== PIP_Obj pipRx ========
;; pipe to which input frames are DMA-ed from the codec
;;
;; PIP_Obj pipRx (buf, framesize, numframes, monitor, notifyWriter, nwarg0, nwarg1, notifyReader, nrarg0, nrarg1, bufFrameAlign)
	.global pipRx
	.asg "<NULL>", _buf
	.asg 0100H, _framesize
	.asg 02H, _numframes
	.asg "none", _monitor
	.asg _PIO_rxPrime, _notifyWriter
	.asg _pioRx, _nwarg0
	.asg 00H, _nwarg1
	.asg _setFlags, _notifyReader
	.asg 01H, _nrarg0
	.asg 00H, _nrarg1
	.asg 02H, _bufFrameAlign
	PIP_Obj 1, pipRx, 0, _buf, _framesize, _numframes, _monitor, _notifyWriter, _nwarg0, _nwarg1, _notifyReader, _nrarg0, _nrarg1, _bufFrameAlign

;; ======== PIP_Obj pipTx ========
;; pipe from which output frames are DMA-ed to the codec
;;
;; PIP_Obj pipTx (buf, framesize, numframes, monitor, notifyWriter, nwarg0, nwarg1, notifyReader, nrarg0, nrarg1, bufFrameAlign)
	.global pipTx
	.asg "<NULL>", _buf
	.asg 0100H, _framesize
	.asg 02H, _numframes
	.asg "none", _monitor
	.asg _setFlags, _notifyWriter
	.asg 02H, _nwarg0
	.asg 00H, _nwarg1
	.asg _PIO_txPrime, _notifyReader
	.asg _pioTx, _nrarg0
	.asg 00H, _nrarg1
	.asg 02H, _bufFrameAlign
	PIP_Obj 1, pipTx, 1, _buf, _framesize, _numframes, _monitor, _notifyWriter, _nwarg0, _nwarg1, _notifyReader, _nrarg0, _nrarg1, _bufFrameAlign

;; ======== STS_Obj audioProcessExecTime ========
;; <add comments here>
;;
;; STS_Obj audioProcessExecTime (prevhigh, prevlow)
	.global audioProcessExecTime
	.asg 00H, _prevhigh
	.asg 00H, _prevlow
	STS_Obj 1, audioProcessExecTime, 0, _prevhigh, _prevlow

;; MODULE INITIALIZATION
	.sect ".sysinit"
	.global BIOS_init, _BIOS_init
BIOS_init:
_BIOS_init:
	GBL_preamble
	GBL_init
	SEM_init
	MEM_init
	OBJ_init
	BUF_init
	CLK_init
	PRD_init
	RTDX_init
	IDL_init
	LCK_init
	LOG_init
	MBX_init
	PIP_init
	QUE_init
	STS_init
	SYS_init
	HWI_init
	HST_init
	DEV_init
	UDEV_init
	DGN_init
	DHL_init
	DPI_init
	SIO_init
	SWI_init
	HOOK_init
	TSK_init
	GIO_init
	DIO_init
	GBL_postamble

;; MODULE STARTUP
	.sect ".sysinit"
	.global BIOS_start, _BIOS_start
BIOS_start:
_BIOS_start:
	GBL_preamble
	GBL_startup
	SEM_startup
	MEM_startup
	OBJ_startup
	BUF_startup
	CLK_startup
	PRD_startup
	RTDX_startup
	IDL_startup
	LCK_startup
	LOG_startup
	MBX_startup
	PIP_startup
	QUE_startup
	STS_startup
	SYS_startup
	HWI_startup
	HST_startup
	DEV_startup
	UDEV_startup
	DGN_startup
	DHL_startup
	DPI_startup
	SIO_startup
	SWI_startup
	HOOK_startup
	TSK_startup
	GIO_startup
	DIO_startup
	GBL_postamble

;; EPILOGUE
	GBL_end
	MEM_end
	OBJ_end
	BUF_end
	CLK_end
	PRD_end
	RTDX_end
	HST_end
	HWI_end
	SWI_end
	TSK_end
	IDL_end
	LOG_end
	PIP_end
	SEM_end
	MBX_end
	QUE_end
	LCK_end
	SIO_end
	STS_end
	SYS_end
	GIO_end
	DEV_end
	UDEV_end
	DGN_end
	DHL_end
	DPI_end
	HOOK_end
	DIO_end

	.copy confend.s54
