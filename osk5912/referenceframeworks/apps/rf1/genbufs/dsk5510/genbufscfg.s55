;;   Do *not* directly modify this file.  It was   
;;   generated by the Configuration Tool; any 
;;   changes risk being overwritten.               

;; INPUT genbufs.cdb

;; CONFIGURATION/VERSION INFORMATION
	.asg "Thu Apr 29 11:21:44 2004", VERS$DATE

;; PROLOGUE
	.include genbufscfg.h55
	.copy confbeg.s55

;; TYPE HEADERS
	.include gbl.h55
	.include mem.h55
	.include obj.h55
	.include buf.h55
	.include clk.h55
	.include prd.h55
	.include rtdx.h55
	.include hst.h55
	.include hwi.h55
	.include swi.h55
	.include tsk.h55
	.include idl.h55
	.include isrc.h55
	.include log.h55
	.include pip.h55
	.include sem.h55
	.include mbx.h55
	.include que.h55
	.include lck.h55
	.include sio.h55
	.include sts.h55
	.include sys.h55
	.include gio.h55
	.include dev.h55
	.include udev.h55
	.include dgn.h55
	.include dhl.h55
	.include dpi.h55
	.include hook.h55
	.include dio.h55
	.include pwrm.h55

;; TYPE ATTRIBUTES
MEM$NUMOF           .set 7
MEM$SETOF           .set 00H
OBJ$NUMOF           .set 0
OBJ$SETOF           .set 00H
BUF$NUMOF           .set 0
BUF$SETOF           .set 00H
CLK$NUMOF           .set 1
CLK$SETOF           .set 00H
PRD$NUMOF           .set 0
PRD$SETOF           .set 00H
RTDX$NUMOF          .set 0
RTDX$SETOF          .set 00H
HST$NUMOF           .set 0
HST$SETOF           .set 00H
HWI$NUMOF           .set 32
HWI$SETOF           .set 0ffffH
SWI$NUMOF           .set 0
SWI$SETOF           .set 00H
TSK$NUMOF           .set 0
TSK$SETOF           .set 00H
IDL$NUMOF           .set 0
IDL$SETOF           .set 00H
ISRC$NUMOF          .set 0
ISRC$SETOF          .set 00H
LOG$NUMOF           .set 2
LOG$SETOF           .set 00H
PIP$NUMOF           .set 0
PIP$SETOF           .set 00H
SEM$NUMOF           .set 0
SEM$SETOF           .set 00H
MBX$NUMOF           .set 0
MBX$SETOF           .set 00H
QUE$NUMOF           .set 0
QUE$SETOF           .set 00H
LCK$NUMOF           .set 0
LCK$SETOF           .set 00H
SIO$NUMOF           .set 0
SIO$SETOF           .set 00H
STS$NUMOF           .set 0
STS$SETOF           .set 00H
DEV$NUMOF           .set 0
DEV$SETOF           .set 00H
UDEV$NUMOF          .set 0
UDEV$SETOF          .set 00H
DGN$NUMOF           .set 0
DGN$SETOF           .set 00H
DHL$NUMOF           .set 0
DHL$SETOF           .set 00H
DPI$NUMOF           .set 0
DPI$SETOF           .set 00H
HOOK$NUMOF          .set 0
HOOK$SETOF          .set 00H
DIO$NUMOF           .set 0
DIO$SETOF           .set 00H

;; module GBL (ROM, DSPSUBTYPE, MODIFYCLKMD, CLKMD, PLLM, PLLDIV0, USERINIT, USERINITFXN, ENABLEINST, LARGEMODEL, ENABLEICACHE, CACHETYPE, CACHEICRTAG1, CACHEICRTAG2, SUPPORTCSL, TRCMASKVALUE, CALLCSLCFGINIT, BIOS_BOOTFXN)
	.global GBL$                     ; == 1
	.global GBL_ROM                  ; genbufscfg.h55
	.global GBL_DSPSUBTYPE           ; genbufscfg.h55
	.global GBL_MODIFYCLKMD          ; genbufscfg.h55
	.global GBL_CLKMD                ; genbufscfg.h55
	.global GBL_PLLM                 ; genbufscfg.h55
	.global GBL_PLLDIV0              ; genbufscfg.h55
	.global GBL_USERINIT             ; genbufscfg.h55
	.global GBL_USERINITFXN          ; genbufscfg.cmd
	.global GBL_ENABLEINST           ; genbufscfg.h55
	.global GBL_LARGEMODEL           ; genbufscfg.h55
	.global GBL_ENABLEICACHE         ; genbufscfg.h55
	.global GBL_CACHETYPE            ; genbufscfg.h55
	.global GBL_CACHEICRTAG1         ; genbufscfg.h55
	.global GBL_CACHEICRTAG2         ; genbufscfg.h55
	.global GBL_SUPPORTCSL           ; genbufscfg.h55
	.global GBL_TRCMASKVALUE         ; genbufscfg.h55
	.global GBL_CALLCSLCFGINIT       ; genbufscfg.h55
	.global GBL_BIOS_BOOTFXN         ; genbufscfg.cmd

;; module MEM (gNumHeap, SEGZERO, MALLOCSEG)
	.global MEM$                     ; == 1
	.global MEM_gNumHeap             ; genbufscfg.h55
	.global MEM_SEGZERO              ; genbufscfg.cmd
	.global MEM_MALLOCSEG            ; genbufscfg.cmd

;; module OBJ ()
	.global OBJ$                     ; == 0

;; module BUF (ENABLED)
	.global BUF$                     ; == 0
	.global BUF_ENABLED              ; genbufscfg.h55

;; module CLK (IMR0TINTMASK, IMR1TINTMASK, INTBIT, TIMERIMRMASK, REGS, TIMERIMR, TIMERIFR, TIMERNUM, USETIMER, MICROSECONDS, TCR, TDDR, TDDRHIGH, PRD, PRDHIGH, COUNTSPMS, COUNTSPMSHIGH, TIMEFXN, HOOKFXN)
	.global CLK$                     ; == 1
	.global CLK_IMR0TINTMASK         ; genbufscfg.h55
	.global CLK_IMR1TINTMASK         ; genbufscfg.h55
	.global CLK_INTBIT               ; genbufscfg.h55
	.global CLK_TIMERIMRMASK         ; genbufscfg.h55
	.global CLK_REGS                 ; genbufscfg.h55
	.global CLK_TIMERIMR             ; genbufscfg.h55
	.global CLK_TIMERIFR             ; genbufscfg.h55
	.global CLK_TIMERNUM             ; genbufscfg.h55
	.global CLK_USETIMER             ; genbufscfg.h55
	.global CLK_MICROSECONDS         ; genbufscfg.h55
	.global CLK_TCR                  ; genbufscfg.h55
	.global CLK_TDDR                 ; genbufscfg.h55
	.global CLK_TDDRHIGH             ; genbufscfg.h55
	.global CLK_PRD                  ; genbufscfg.h55
	.global CLK_PRDHIGH              ; genbufscfg.h55
	.global CLK_COUNTSPMS            ; genbufscfg.h55
	.global CLK_COUNTSPMSHIGH        ; genbufscfg.h55
	.global CLK_TIMEFXN              ; genbufscfg.cmd
	.global CLK_HOOKFXN              ; genbufscfg.cmd

;; module PRD (SCALAR, THOOKFXN)
	.global PRD$                     ; == 1
	.global PRD_SCALAR               ; genbufscfg.h55
	.global PRD_THOOKFXN             ; genbufscfg.cmd

;; module RTDX (USERTDX, USERTEXECUTION, DATAMEMSEG, BUFMEMSIZE)
	.global RTDX$                    ; == 0
	.global RTDX_USERTDX             ; genbufscfg.h55
	.global RTDX_USERTEXECUTION      ; genbufscfg.h55
	.global RTDX_DATAMEMSEG          ; genbufscfg.cmd
	.global RTDX_BUFMEMSIZE          ; genbufscfg.h55

;; module HST (RTDX, DSM, NONE, MAXFRAMESET, MAXFRAMEALLOWED, DSMBUFSEG, DSMMEMSIZE)
	.global HST$                     ; == 0
	.global HST_RTDX                 ; genbufscfg.h55
	.global HST_DSM                  ; genbufscfg.h55
	.global HST_NONE                 ; genbufscfg.h55
	.global HST_MAXFRAMESET          ; genbufscfg.h55
	.global HST_MAXFRAMEALLOWED      ; genbufscfg.h55
	.global HST_DSMBUFSEG            ; genbufscfg.cmd
	.global HST_DSMMEMSIZE           ; genbufscfg.h55

;; module HWI (ZEROTAB, STACKMODEL)
	.global HWI$                     ; == 1
	.global HWI_ZEROTAB              ; genbufscfg.h55
	.global HWI_STACKMODEL           ; genbufscfg.h55

;; module SWI (EHOOKFXN, IHOOKFXN, EXECFXN, RUNFXN)
	.global SWI$                     ; == 0
	.global SWI_EHOOKFXN             ; genbufscfg.cmd
	.global SWI_IHOOKFXN             ; genbufscfg.cmd
	.global SWI_EXECFXN              ; genbufscfg.cmd
	.global SWI_RUNFXN               ; genbufscfg.cmd

;; module TSK (STACKSIZE, SYSTACKSIZE, STACKSEG, PRIORITY, VCREATEFXN, VDELETEFXN, VEXITFXN, SWITCHFXN, READYFXN, NUM_HOOKS)
	.global TSK$                     ; == 0
	.global TSK_STACKSIZE            ; genbufscfg.h55
	.global TSK_SYSTACKSIZE          ; genbufscfg.h55
	.global TSK_STACKSEG             ; genbufscfg.cmd
	.global TSK_PRIORITY             ; genbufscfg.h55
	.global TSK_VCREATEFXN           ; genbufscfg.cmd
	.global TSK_VDELETEFXN           ; genbufscfg.cmd
	.global TSK_VEXITFXN             ; genbufscfg.cmd
	.global TSK_SWITCHFXN            ; genbufscfg.h55
	.global TSK_READYFXN             ; genbufscfg.h55
	.global TSK_NUM_HOOKS            ; genbufscfg.h55

;; module IDL (USECLKIDLTIME, CALIBRFXN)
	.global IDL$                     ; == 0
	.global IDL_USECLKIDLTIME        ; genbufscfg.h55
	.global IDL_CALIBRFXN            ; genbufscfg.cmd

;; module ISRC ()
	.global ISRC$                    ; == 1

;; module LOG (ENABLED)
	.global LOG$                     ; == 1
	.global LOG_ENABLED              ; genbufscfg.h55

;; module PIP (gNumEmbed, gNextId)
	.global PIP$                     ; == 0
	.global PIP_gNumEmbed            ; genbufscfg.h55
	.global PIP_gNextId              ; genbufscfg.h55

;; module SEM ()
	.global SEM$                     ; == 0

;; module MBX ()
	.global MBX$                     ; == 0

;; module QUE ()
	.global QUE$                     ; == 1

;; module LCK ()
	.global LCK$                     ; == 1

;; module SIO ()
	.global SIO$                     ; == 0

;; module STS ()
	.global STS$                     ; == 0

;; module SYS (ABORTFXN, ERRORFXN, EXITFXN, PUTCFXN)
	.global SYS$                     ; == 1
	.global SYS_ABORTFXN             ; genbufscfg.cmd
	.global SYS_ERRORFXN             ; genbufscfg.cmd
	.global SYS_EXITFXN              ; genbufscfg.cmd
	.global SYS_PUTCFXN              ; genbufscfg.cmd

;; module GIO (CREATEFXN, DELETEFXN, PENDFXN, POSTFXN)
	.global GIO$                     ; == 0
	.global GIO_CREATEFXN            ; genbufscfg.cmd
	.global GIO_DELETEFXN            ; genbufscfg.cmd
	.global GIO_PENDFXN              ; genbufscfg.cmd
	.global GIO_POSTFXN              ; genbufscfg.cmd

;; module DEV ()
	.global DEV$                     ; == 0

;; module UDEV ()
	.global UDEV$                    ; == 0

;; module DGN ()
	.global DGN$                     ; == 0

;; module DHL (gChannelsAvailable)
	.global DHL$                     ; == 0
	.global DHL_gChannelsAvailable   ; genbufscfg.h55

;; module DPI ()
	.global DPI$                     ; == 0

;; module HOOK (KNLID)
	.global HOOK$                    ; == 0
	.global HOOK_KNLID               ; genbufscfg.h55

;; module DIO (STATIC, NUMTSKBASE, NUMSWIBASE)
	.global DIO$                     ; == 0
	.global DIO_STATIC               ; genbufscfg.h55
	.global DIO_NUMTSKBASE           ; genbufscfg.h55
	.global DIO_NUMSWIBASE           ; genbufscfg.h55

;; module PWRM (PWRM_ENABLE, PWRM_BOOTHOOKFXN, PWRM_ADAPTCLK, PWRM_IDLEMASK, PWRM_CAPSMASK, PWRM_SCALING, PWRM_INITSP, PWRM_INITVOLTS, PWRM_DS_IDLEMASK, PWRM_IER0, PWRM_IER1)
	.global PWRM$                    ; == 1
	.global PWRM_PWRM_ENABLE         ; genbufscfg.h55
	.global PWRM_PWRM_BOOTHOOKFXN    ; genbufscfg.cmd
	.global PWRM_PWRM_ADAPTCLK       ; genbufscfg.h55
	.global PWRM_PWRM_IDLEMASK       ; genbufscfg.h55
	.global PWRM_PWRM_CAPSMASK       ; genbufscfg.h55
	.global PWRM_PWRM_SCALING        ; genbufscfg.h55
	.global PWRM_PWRM_INITSP         ; genbufscfg.h55
	.global PWRM_PWRM_INITVOLTS      ; genbufscfg.h55
	.global PWRM_PWRM_DS_IDLEMASK    ; genbufscfg.h55
	.global PWRM_PWRM_IER0           ; genbufscfg.h55
	.global PWRM_PWRM_IER1           ; genbufscfg.h55

;; MODULE CONFIGURATION

;; ======== GBL_config ========
	.asg 00H, _ROM
	.asg 01586H, _DSPSUBTYPE
	.asg 01H, _MODIFYCLKMD
	.asg 02cd0H, _CLKMD
	.asg 0fH, _PLLM
	.asg 08000H, _PLLDIV0
	.asg 00H, _USERINIT
	.asg _FXN_F_nop, _USERINITFXN
	.asg 00H, _ENABLEINST
	.asg 01H, _LARGEMODEL
	.asg 00H, _ENABLEICACHE
	.asg 02H, _CACHETYPE
	.asg 0f80000H, _CACHEICRTAG1
	.asg 0f81000H, _CACHEICRTAG2
	.asg 01H, _SUPPORTCSL
	.asg 0dbefH, _TRCMASKVALUE
	.asg 01H, _CALLCSLCFGINIT
	.asg GBL_F_biosbootfxn, _BIOS_BOOTFXN
	GBL_config  _ROM, _DSPSUBTYPE, _MODIFYCLKMD, _CLKMD, _PLLM, _PLLDIV0, _USERINIT, _USERINITFXN, _ENABLEINST, _LARGEMODEL, _ENABLEICACHE, _CACHETYPE, _CACHEICRTAG1, _CACHEICRTAG2, _SUPPORTCSL, _TRCMASKVALUE, _CALLCSLCFGINIT, _BIOS_BOOTFXN

;; ======== MEM_config ========
	.asg 00H, _gNumHeap
	.asg MEM_NULL, _SEGZERO
	.asg MEM_NULL, _MALLOCSEG
	MEM_config  _gNumHeap, _SEGZERO, _MALLOCSEG

;; ======== OBJ_config ========
	OBJ_config

;; ======== BUF_config ========
	.asg 01H, _ENABLED
	BUF_config  _ENABLED

;; ======== CLK_config ========
	.asg 010H, _IMR0TINTMASK
	.asg 00H, _IMR1TINTMASK
	.asg 04H, _INTBIT
	.asg 010H, _TIMERIMRMASK
	.asg 01000H, _REGS
	.asg 00H, _TIMERIMR
	.asg 01H, _TIMERIFR
	.asg 00H, _TIMERNUM
	.asg 01H, _USETIMER
	.asg 1000.000000, _MICROSECONDS
	.asg 023H, _TCR
	.asg 03H, _TDDR
	.asg 00H, _TDDRHIGH
	.asg 0c34fH, _PRD
	.asg 00H, _PRDHIGH
	.asg 0c350H, _COUNTSPMS
	.asg 00H, _COUNTSPMSHIGH
	.asg CLK_F_getshtime, _TIMEFXN
	.asg CLK_F_run, _HOOKFXN
	CLK_config  _IMR0TINTMASK, _IMR1TINTMASK, _INTBIT, _TIMERIMRMASK, _REGS, _TIMERIMR, _TIMERIFR, _TIMERNUM, _USETIMER, _MICROSECONDS, _TCR, _TDDR, _TDDRHIGH, _PRD, _PRDHIGH, _COUNTSPMS, _COUNTSPMSHIGH, _TIMEFXN, _HOOKFXN

;; ======== PRD_config ========
	.asg 04000H, _SCALAR
	.asg FXN_F_nop, _THOOKFXN
	PRD_config  _SCALAR, _THOOKFXN

;; ======== RTDX_config ========
	.asg 00H, _USERTDX
	.asg 00H, _USERTEXECUTION
	.asg DARAM, _DATAMEMSEG
	.asg 0102H, _BUFMEMSIZE
	RTDX_config  _USERTDX, _USERTEXECUTION, _DATAMEMSEG, _BUFMEMSIZE

;; ======== HST_config ========
	.asg 00H, _RTDX
	.asg 00H, _DSM
	.asg 01H, _NONE
	.asg 00H, _MAXFRAMESET
	.asg 0100H, _MAXFRAMEALLOWED
	.asg DARAM, _DSMBUFSEG
	.asg 0400H, _DSMMEMSIZE
	HST_config  _RTDX, _DSM, _NONE, _MAXFRAMESET, _MAXFRAMEALLOWED, _DSMBUFSEG, _DSMMEMSIZE

;; ======== HWI_config ========
	.asg 00H, _ZEROTAB
	.asg "C54X_STK", _STACKMODEL
	HWI_config  _ZEROTAB, _STACKMODEL

;; ======== SWI_config ========
	.asg GBL_NULL, _EHOOKFXN
	.asg GBL_NULL, _IHOOKFXN
	.asg FXN_F_nop, _EXECFXN
	.asg FXN_F_nop, _RUNFXN
	SWI_config  _EHOOKFXN, _IHOOKFXN, _EXECFXN, _RUNFXN

;; ======== TSK_config ========
	.asg 0400H, _STACKSIZE
	.asg 0100H, _SYSTACKSIZE
	.asg MEM_NULL, _STACKSEG
	.asg 01H, _PRIORITY
	.asg _FXN_F_nop, _VCREATEFXN
	.asg _FXN_F_nop, _VDELETEFXN
	.asg _FXN_F_nop, _VEXITFXN
	.asg 00H, _SWITCHFXN
	.asg 00H, _READYFXN
	.asg 00H, _NUM_HOOKS
	TSK_config  _STACKSIZE, _SYSTACKSIZE, _STACKSEG, _PRIORITY, _VCREATEFXN, _VDELETEFXN, _VEXITFXN, _SWITCHFXN, _READYFXN, _NUM_HOOKS

;; ======== IDL_config ========
	.asg 00H, _USECLKIDLTIME
	.asg GBL_NULL, _CALIBRFXN
	IDL_config  _USECLKIDLTIME, _CALIBRFXN

;; ======== ISRC_config ========
	ISRC_config

;; ======== LOG_config ========
	.asg 01H, _ENABLED
	LOG_config  _ENABLED

;; ======== PIP_config ========
	.asg 00H, _gNumEmbed
	.asg 00H, _gNextId
	PIP_config  _gNumEmbed, _gNextId

;; ======== SEM_config ========
	SEM_config

;; ======== MBX_config ========
	MBX_config

;; ======== QUE_config ========
	QUE_config

;; ======== LCK_config ========
	LCK_config

;; ======== SIO_config ========
	SIO_config

;; ======== STS_config ========
	STS_config

;; ======== SYS_config ========
	.asg _UTL_doAbort, _ABORTFXN
	.asg _UTL_doError, _ERRORFXN
	.asg _UTL_halt, _EXITFXN
	.asg _UTL_doPutc, _PUTCFXN
	SYS_config  _ABORTFXN, _ERRORFXN, _EXITFXN, _PUTCFXN

;; ======== GIO_config ========
	.asg _FXN_F_nop, _CREATEFXN
	.asg _FXN_F_nop, _DELETEFXN
	.asg _FXN_F_nop, _PENDFXN
	.asg _FXN_F_nop, _POSTFXN
	GIO_config  _CREATEFXN, _DELETEFXN, _PENDFXN, _POSTFXN

;; ======== DEV_config ========
	DEV_config

;; ======== UDEV_config ========
	UDEV_config

;; ======== DGN_config ========
	DGN_config

;; ======== DHL_config ========
	.asg 00H, _gChannelsAvailable
	DHL_config  _gChannelsAvailable

;; ======== DPI_config ========
	DPI_config

;; ======== HOOK_config ========
	.asg 00H, _KNLID
	HOOK_config  _KNLID

;; ======== DIO_config ========
	.asg 00H, _STATIC
	.asg 00H, _NUMTSKBASE
	.asg 00H, _NUMSWIBASE
	DIO_config  _STATIC, _NUMTSKBASE, _NUMSWIBASE

;; ======== PWRM_config ========
	.asg 00H, _PWRM_ENABLE
	.asg _FXN_F_nop, _PWRM_BOOTHOOKFXN
	.asg 00H, _PWRM_ADAPTCLK
	.asg 05H, _PWRM_IDLEMASK
	.asg 033H, _PWRM_CAPSMASK
	.asg 00H, _PWRM_SCALING
	.asg 0fH, _PWRM_INITSP
	.asg 1.600000, _PWRM_INITVOLTS
	.asg 03fH, _PWRM_DS_IDLEMASK
	.asg 00H, _PWRM_IER0
	.asg 00H, _PWRM_IER1
	PWRM_config  _PWRM_ENABLE, _PWRM_BOOTHOOKFXN, _PWRM_ADAPTCLK, _PWRM_IDLEMASK, _PWRM_CAPSMASK, _PWRM_SCALING, _PWRM_INITSP, _PWRM_INITVOLTS, _PWRM_DS_IDLEMASK, _PWRM_IER0, _PWRM_IER1

;; ======== MEM_Obj DARAM ========
;; Dual Access RAM for efficient data access
;;
;; MEM_Obj DARAM (len, iAllocHeap, iSegZero, iHeapId)
	.global DARAM
	.asg 07f00H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, DARAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SARAM ========
;; SARAM split into blocks for instruction cycle efficiency
;;
;; MEM_Obj SARAM (len, iAllocHeap, iSegZero, iHeapId)
	.global SARAM
	.asg 010000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SARAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj VECT ========
;; This object defines space for the DSP's interrupt vectors and can't be deleted
;;
;; MEM_Obj VECT (len, iAllocHeap, iSegZero, iHeapId)
	.global VECT
	.asg 080H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, VECT, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SARAM_A ========
;; 32K block to insure next 64K block is aligned on 64K boundary
;;
;; MEM_Obj SARAM_A (len, iAllocHeap, iSegZero, iHeapId)
	.global SARAM_A
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SARAM_A, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SARAM_B ========
;; 32K block to finish allocating balance of internal memory
;;
;; MEM_Obj SARAM_B (len, iAllocHeap, iSegZero, iHeapId)
	.global SARAM_B
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SARAM_B, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SDRAM ========
;; Synch DRAM MT48LC2M32B2-7, CE0 space limits size to 2M words
;;
;; MEM_Obj SDRAM (len, iAllocHeap, iSegZero, iHeapId)
	.global SDRAM
	.asg 01d8000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SDRAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj FLASH ========
;; Flash Re-programable EEPROM 29LV400
;;
;; MEM_Obj FLASH (len, iAllocHeap, iSegZero, iHeapId)
	.global FLASH
	.asg 040000H, _len
	.asg 00H, _iAllocHeap
	.asg MEM_NULL, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, FLASH, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== CLK_Obj PRD_clock ========
;; This clock function calls PRD_tick from within the on-chip timer ISR
;;
;; CLK_Obj PRD_clock (function)
	.global PRD_clock
	.asg FXN_F_nop, _function
	CLK_Obj 1, PRD_clock, 0, _function

;; ======== HWI_Obj HWI_RESET ========
;; defines function for the RESET ISR
;;
;; HWI_Obj HWI_RESET (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_RESET
	.asg _c_int00, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_RESET, 0, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_NMI ========
;; defines function for the NMI ISR
;;
;; HWI_Obj HWI_NMI (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_NMI
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_NMI, 1, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT2 ========
;; defines the INT2 Interrupt
;;
;; HWI_Obj HWI_INT2 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT2
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT2, 2, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT3 ========
;; defines the INT3 Interrupt
;;
;; HWI_Obj HWI_INT3 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT3
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT3, 3, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT4 ========
;; defines the INT4 Interrupt
;;
;; HWI_Obj HWI_INT4 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT4
	.asg CLK_F_isr, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "CLK", _client
	.asg 01H, _iUseDispatcher
	.asg CLK_A_TABBEG, _iArg
	.asg 010H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT4, 4, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT5 ========
;; defines the INT5 Interrupt
;;
;; HWI_Obj HWI_INT5 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT5
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 020H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT5, 5, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT6 ========
;; defines the INT6 Interrupt
;;
;; HWI_Obj HWI_INT6 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT6
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 040H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT6, 6, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT7 ========
;; defines the INT7 Interrupt
;;
;; HWI_Obj HWI_INT7 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT7
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 080H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT7, 7, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT8 ========
;; defines the INT8 Interrupt
;;
;; HWI_Obj HWI_INT8 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT8
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0100H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT8, 8, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT9 ========
;; defines the INT9  Interrupt
;;
;; HWI_Obj HWI_INT9 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT9
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0200H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT9, 9, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT10 ========
;; defines the INT10 Interrupt
;;
;; HWI_Obj HWI_INT10 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT10
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0400H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT10, 10, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT11 ========
;; defines the INT11 Interrupt
;;
;; HWI_Obj HWI_INT11 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT11
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0800H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT11, 11, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT12 ========
;; defines the INT12 Interrupt
;;
;; HWI_Obj HWI_INT12 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT12
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT12, 12, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT13 ========
;; defines the INT13 Interrupt
;;
;; HWI_Obj HWI_INT13 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT13
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT13, 13, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT14 ========
;; defines the INT14 Interrupt
;;
;; HWI_Obj HWI_INT14 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT14
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT14, 14, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT15 ========
;; defines the INT15 Interrupt
;;
;; HWI_Obj HWI_INT15 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT15
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT15, 15, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT16 ========
;; defines the INT16 Interrupt
;;
;; HWI_Obj HWI_INT16 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT16
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT16, 16, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT17 ========
;; defines the INT17 Interrupt
;;
;; HWI_Obj HWI_INT17 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT17
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 02H, _Ier1Mask
	HWI_Obj 1, HWI_INT17, 17, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT18 ========
;; defines the INT18 Interrupt
;;
;; HWI_Obj HWI_INT18 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT18
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 04H, _Ier1Mask
	HWI_Obj 1, HWI_INT18, 18, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT19 ========
;; defines the INT19 Interrupt
;;
;; HWI_Obj HWI_INT19 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT19
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 08H, _Ier1Mask
	HWI_Obj 1, HWI_INT19, 19, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT20 ========
;; defines the INT20 Interrupt
;;
;; HWI_Obj HWI_INT20 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT20
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 010H, _Ier1Mask
	HWI_Obj 1, HWI_INT20, 20, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT21 ========
;; defines the INT21 Interrupt
;;
;; HWI_Obj HWI_INT21 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT21
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 020H, _Ier1Mask
	HWI_Obj 1, HWI_INT21, 21, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT22 ========
;; defines the INT22 Interrupt
;;
;; HWI_Obj HWI_INT22 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT22
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 040H, _Ier1Mask
	HWI_Obj 1, HWI_INT22, 22, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT23 ========
;; defines the INT23 Interrupt
;;
;; HWI_Obj HWI_INT23 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT23
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 080H, _Ier1Mask
	HWI_Obj 1, HWI_INT23, 23, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_BERR ========
;; defines the BERR Interrupt
;;
;; HWI_Obj HWI_BERR (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_BERR
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0100H, _Ier1Mask
	HWI_Obj 1, HWI_BERR, 24, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_DLOG ========
;; RESERVED for RTDX
;;
;; HWI_Obj HWI_DLOG (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_DLOG
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0200H, _Ier1Mask
	HWI_Obj 1, HWI_DLOG, 25, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_RTOS ========
;; defines the RTOS Interrupt
;;
;; HWI_Obj HWI_RTOS (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_RTOS
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0400H, _Ier1Mask
	HWI_Obj 1, HWI_RTOS, 26, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT27 ========
;; defines the SINT27 Interrupt
;;
;; HWI_Obj HWI_SINT27 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT27
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0800H, _Ier1Mask
	HWI_Obj 1, HWI_SINT27, 27, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT28 ========
;; defines the SINT28 Interrupt
;;
;; HWI_Obj HWI_SINT28 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT28
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 01000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT28, 28, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT29 ========
;; defines the SINT29 Interrupt
;;
;; HWI_Obj HWI_SINT29 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT29
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 02000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT29, 29, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT30 ========
;; defines the SINT30 Interrupt
;;
;; HWI_Obj HWI_SINT30 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT30
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 04000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT30, 30, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT31 ========
;; defines the SINT31 Interrupt
;;
;; HWI_Obj HWI_SINT31 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT31
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 08000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT31, 31, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== LOG_Obj LOG_system ========
;; This object is required by the system to accumulate execution trace information
;;
;; LOG_Obj LOG_system (bufseg, buflen, logtype)
	.global LOG_system
	.asg DARAM, _bufseg
	.asg 040H, _buflen
	.asg "circular", _logtype
	LOG_Obj 1, LOG_system, 0, _bufseg, _buflen, _logtype

;; ======== LOG_Obj MOD_xdasBufSrcTrace ========
;; <add comments here>
;;
;; LOG_Obj MOD_xdasBufSrcTrace (bufseg, buflen, logtype)
	.global MOD_xdasBufSrcTrace
	.asg DARAM, _bufseg
	.asg 0800H, _buflen
	.asg "fixed", _logtype
	LOG_Obj 1, MOD_xdasBufSrcTrace, 0, _bufseg, _buflen, _logtype

;; MODULE INITIALIZATION
	.sect ".sysinit"
	.global BIOS_init, _BIOS_init
BIOS_init:
_BIOS_init:
	GBL_preamble
	GBL_init
	SEM_init
	MEM_init
	OBJ_init
	BUF_init
	CLK_init
	PRD_init
	RTDX_init
	IDL_init
	LCK_init
	LOG_init
	MBX_init
	PIP_init
	QUE_init
	STS_init
	SYS_init
	HWI_init
	HST_init
	DEV_init
	UDEV_init
	DGN_init
	DHL_init
	DPI_init
	SIO_init
	SWI_init
	HOOK_init
	TSK_init
	ISRC_init
	GIO_init
	DIO_init
	PWRM_init
	GBL_postamble

;; MODULE STARTUP
	.sect ".sysinit"
	.global BIOS_start, _BIOS_start
BIOS_start:
_BIOS_start:
	GBL_preamble
	GBL_startup
	SEM_startup
	MEM_startup
	OBJ_startup
	BUF_startup
	CLK_startup
	PRD_startup
	RTDX_startup
	IDL_startup
	LCK_startup
	LOG_startup
	MBX_startup
	PIP_startup
	QUE_startup
	STS_startup
	SYS_startup
	HWI_startup
	HST_startup
	DEV_startup
	UDEV_startup
	DGN_startup
	DHL_startup
	DPI_startup
	SIO_startup
	SWI_startup
	HOOK_startup
	TSK_startup
	ISRC_startup
	GIO_startup
	DIO_startup
	PWRM_startup
	GBL_postamble

;; EPILOGUE
	GBL_end
	MEM_end
	OBJ_end
	BUF_end
	CLK_end
	PRD_end
	RTDX_end
	HST_end
	HWI_end
	SWI_end
	TSK_end
	IDL_end
	ISRC_end
	LOG_end
	PIP_end
	SEM_end
	MBX_end
	QUE_end
	LCK_end
	SIO_end
	STS_end
	SYS_end
	GIO_end
	DEV_end
	UDEV_end
	DGN_end
	DHL_end
	DPI_end
	HOOK_end
	DIO_end
	PWRM_end

	.copy confend.s55
